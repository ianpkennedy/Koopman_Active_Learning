#!/usr/bin/env python


import rospy



from nuturtlebot_msgs.msg import SensorData
from nuturtlebot_msgs.msg import WheelCommands
from sensor_msgs.msg import JointState

from geometry_msgs.msg import Twist

from lqr.koop_train import Turtle_Koop, Turtle_Koop_Vel, Turtle_Koop_Poly, Turtle_Koop_Vel_X, Turtle_Koop_Vel_X_Xdot_Mono

from cartpole.msg import Data

class Ground_Turtle():
    def __init__(self):


        self.first = True
        self.first_j = True

        self.dt = rospy.get_param('dt')
        self.encoder_ticks_to_rad = rospy.get_param('encoder_ticks_to_rad')
        self.motor_cmd_to_radsec = rospy.get_param('motor_cmd_to_radsec')
        
        self.ltheta = 0.
        self.lthetadot = 0.
        self.rtheta = 0.
        self.x = 0.
        self.xdot = 0.
        
        self.lvel = 3.03  #3.0303
        self.rvel = 3.03  #3.03 
        self.vel_avg = 3.03    
        
        # self.lcmd = 3.03  #3.0303
        # self.rcmd = 3.03  #3.0303
        self.cmd = 126 * self.motor_cmd_to_radsec

        self.encoder_sub =  rospy.Subscriber('/sensor_data', SensorData, self.encoder_callback)
        self.x_data_sub =  rospy.Subscriber('/x_data', Data, self.x_data_callback)
        self.xdot_data_sub =  rospy.Subscriber('/xdot_data', Data, self.xdot_data_callback)        
        # self.cmd_sub = rospy.Subscriber('/wheel_cmd', WheelCommands, self.cmd_callback)
        self.joint_sub = rospy.Subscriber('/blue/joint_states', JointState, self.joint_callback)
        
        self.wheel_cmd_pub = rospy.Publisher('/wheel_cmd', WheelCommands, queue_size = 10)
        self.twist_pub = rospy.Publisher('/cmd_vel', Twist, queue_size = 10)

        self.data_t_pub = rospy.Publisher('/t_data', Data, queue_size=10000)
        self.data_v_pub = rospy.Publisher('v_data', Data, queue_size=10000)

        self.koopman =  Turtle_Koop_Vel_X_Xdot_Mono(self.dt, 4, 1, self.x, self.vel_avg, self.ltheta, self.lthetadot, self.cmd  )

        self.l_first = 0.
        self.r_first = 0.
        
        self.l_first_j = 0.
        self.r_first_j = 0.
        
        self.iteration = 0

    def joint_callback(self,data):
        """Get JointState

        Args:
            data (float): turtlebot joint states
        """
        self.lvel = data.velocity[0]
        self.rvel = data.velocity[1]
        print(self.lvel)
        print(self.rvel)
        if self.lvel<1.:
            self.lvel = 3.03 #3.0303
        if self.rvel<1.:
            self.rvel = 3.03  #3.0303
            
        self.vel_avg = (self.lvel + self.rvel) / 2
        
        self.data_v_pub.publish( self.vel_avg  )
        
        if self.first_j == True:
            self.l_first_j = data.position[0]
            self.r_first_j = data.position[1]
            self.first_j = False
        
        self.data_t_pub.publish( ((data.position[0]-self.l_first_j) + (data.position[1] - self.r_first_j))/2 )

        
    def encoder_callback(self,data):
        """encoder turtlebot data

        Args:
            data (nuturtlebot_msg): encoder data from turtlebot
        """
        
        t = Twist()
        t.linear.x = 0.1 #0.22
        t.linear.y = 0.
        t.linear.z = 0.
        
        t.angular.x = 0.
        t.angular.y = 0.
        t.angular.z = 0.
        
        w_cmd = WheelCommands()
        w_cmd.left_velocity = 126
        w_cmd.right_velocity = 126

        
        # self.wheel_cmd_pub.publish(w_cmd)
        self.twist_pub.publish(t)
        
        self.ltheta_old = self.ltheta
        # self.rtheta_old = self.rtheta
        
        self.ltheta = data.left_encoder
        # self.rtheta = data.right_encoder   
        
        if self.first == True:
            self.l_first = self.ltheta
            self.r_first = self.rtheta
            self.first = False

        
        theta_avg = (((self.ltheta - self.l_first)*self.encoder_ticks_to_rad) + ((self.rtheta - self.r_first)*self.encoder_ticks_to_rad)) / 2
        
        self.iteration+=1
                
        self.koopman.train_model(self.x,self.xdot, theta_avg, self.vel_avg, float(self.cmd*self.motor_cmd_to_radsec))
        self.koopman.calculateK()

        #Train the model in this location

        
        
        
    def x_data_callback(self, data):
        """Camera x position data for robot

        Args:
            data (float): x position in meters
        """

        self.x = data.data
        # print('x: ', self.x)
        
    def xdot_data_callback(self, data):
        """Camera x position data for robot

        Args:
            data (float): x speed in meters/s
        """

        self.xdot = data.data
        # print('x: ', self.x)        
        
def main():
    """
    Main function
    """
    rospy.init_node('ground_turtle')
    control = Ground_Turtle()
    rospy.spin()

if __name__ == '__main__':
    main()