#!/usr/bin/env python


import rospy



from nuturtlebot_msgs.msg import SensorData
from nuturtlebot_msgs.msg import WheelCommands
from sensor_msgs.msg import JointState

from geometry_msgs.msg import Twist

from lqr.koop_train import Turtle_Koop, Turtle_Koop_Vel, Turtle_Koop_Poly, Turtle_Koop_Poly3, Turtle_Koop_Poly4

from cartpole.msg import Data


class Simple_Turtle():
    def __init__(self):
        
        self.dt = rospy.get_param('dt')
        self.basis = rospy.get_param('basis')
        
        self.encoder_ticks_to_rad = rospy.get_param('encoder_ticks_to_rad')
        self.motor_cmd_to_radsec = rospy.get_param('motor_cmd_to_radsec')
        
        self.ltheta = 0.
        self.rtheta = 0.
        
        self.lvel = 3.03 #6.05  #3.0303
        self.rvel = 3.03 #6.05  #3.03     
        
        self.lcmd = 3.03 #6.05  #3.0303
        self.rcmd = 3.03 #6.05  #3.0303

        self.encoder_sub =  rospy.Subscriber('/sensor_data', SensorData, self.encoder_callback)
        self.cmd_sub = rospy.Subscriber('/wheel_cmd', WheelCommands, self.cmd_callback)
        self.joint_sub = rospy.Subscriber('/blue/joint_states', JointState, self.joint_callback)
        
        self.twist_pub = rospy.Publisher('/cmd_vel', Twist, queue_size = 10)
        self.data_l_pub = rospy.Publisher('/l_data', Data, queue_size=10000)
        self.data_r_pub = rospy.Publisher('/r_data', Data, queue_size=10000)
        self.data_lv_pub = rospy.Publisher('lv_data', Data, queue_size=10000)
        self.data_rv_pub = rospy.Publisher('rv_data', Data, queue_size=10000)
        
        
        self.first = True
        self.first_j = True

        
        
        if self.basis == 'fourier':
            self.koopman = Turtle_Koop_Vel(self.dt, 4, 2, self.ltheta, self.rtheta, self.lvel, self.rvel, self.lcmd, self.rcmd)
        if self.basis == 'poly':
            self.koopman = Turtle_Koop_Poly4(self.dt, 4, 2, self.ltheta, self.rtheta, self.lvel, self.rvel, self.lcmd, self.rcmd)
  
        
        self.l_first = 0.
        self.r_first = 0.
        
        self.l_first_j = 0.
        self.r_first_j = 0.    
        
        self.iteration = 0
        
    def joint_callback(self,data):
        """Get JointState

        Args:
            data (float): turtlebot joint states
        """
        self.lvel = data.velocity[0]
        self.rvel = data.velocity[1]
        
        if self.lvel<1.:
            self.lvel = 3.03 #6.06 #3.0303
        if self.rvel<1.:
            self.rvel = 3.03 #6.06  #3.0303
        
        self.data_lv_pub.publish(self.lvel)
        self.data_rv_pub.publish(self.rvel)  
       
        if self.first_j == True:
            self.l_first_j = data.position[0]
            self.r_first_j = data.position[1]
            self.first_j = False
        
        self.data_l_pub.publish(data.position[0]-self.l_first_j)
        self.data_r_pub.publish(data.position[1]-self.r_first_j)

        
        # print(self.lvel)
        # print(self.rvel)
        
    def encoder_callback(self,data):
        """encoder turtlebot data

        Args:
            data (nuturtlebot_msg): encoder data from turtlebot
        """
        
        t = Twist()
        t.linear.x = 0.1
        t.linear.y = 0.
        t.linear.z = 0.
        
        t.angular.x = 0.
        t.angular.y = 0.
        t.angular.z = 0.
        
        self.twist_pub.publish(t)
        
        
        self.ltheta_old = self.ltheta
        self.rtheta_old = self.rtheta
        
        self.ltheta = data.left_encoder
        self.rtheta = data.right_encoder  

        
        if self.first == True:
            self.l_first = self.ltheta
            self.r_first = self.rtheta
            self.first = False
        
        # print("right angle: ", (self.ltheta - self.l_first)*self.encoder_ticks_to_rad)
        # print("left angle: ", (self.rtheta - self.r_first)*self.encoder_ticks_to_rad)
        
        # self.data_l_pub.publish((self.ltheta - self.l_first)*self.encoder_ticks_to_rad)
        # self.data_r_pub.publish((self.rtheta - self.r_first)*self.encoder_ticks_to_rad)
        
        self.iteration+=1
        # print('iteration: ', self.iteration)
        self.koopman.train_model((self.ltheta - self.l_first)*self.encoder_ticks_to_rad, (self.rtheta - self.r_first)*self.encoder_ticks_to_rad, self.lvel, self.rvel, self.lcmd, self.rcmd)
        self.koopman.calculateK()
        

        
    def cmd_callback(self, data):
        """motor command callback

        Args:
            data (WheelCommands): input commands to system
        """
        int_cmd_left = data.left_velocity
        int_cmd_right = data.right_velocity
        
        # if int_cmd_left == 0:
        #     int_cmd_left = 126
            
        # if int_cmd_right == 0:
        #     int_cmd_right = 126   
        
        self.lcmd = float(int_cmd_left) *self.motor_cmd_to_radsec
        self.rcmd = float(int_cmd_right) *self.motor_cmd_to_radsec
        
        print('rcmd: ', self.rcmd)
        print('lcmd: ', self.lcmd)
        
        
        
def main():
    """
    Main function
    """
    rospy.init_node('simple_turtle')
    simple = Simple_Turtle()
    rospy.spin()

if __name__ == '__main__':
    main()